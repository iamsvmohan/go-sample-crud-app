// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2018-04-06 08:50:46.765267888 +0900 JST m=+0.025988291

package docs

import (
	"github.com/swaggo/swag"
)

var doc = `{
  "swagger": "2.0",
  "info": {
      "description": "This is a Customer Service CRUD",
      "title": "Customer Service API",
      "termsOfService": "http://swagger.io/terms/",
      "contact": {
          "name": "API Support",
          "url": "http://www.swagger.io/support",
          "email": "support@swagger.io"
      },
      "license": {
          "name": "Apache 2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "version": "1.0"
  },
  "host": "localhost:5601",
  "basePath": "/",
  "paths": {          
    "/customers": {
    "post": {
      "description": "Create Customer",
      "tags": [
        "customer-service"
      ],
      "summary": "Creates a new Customer",
      "operationId": "createCustomer",
      "parameters": [
        {
          "name": "Body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateCustomer"
          }
        }
      ],
      "responses": {
        "200": {
          "$ref": "#/responses/reposResp"
        },
        "400": {
          "$ref": "#/responses/badReq"
        }
      
      }
    },
    "get": {
      "tags": [
        "customer-service"
      ],
      "summary": "Get All Customers",
      "operationId": "GetAllCustomers",
      "responses": {
        "200": {
          "$ref": "#/responses/reposResp"
        },
        "400": {
          "$ref": "#/responses/badReq"
        }
      }
    }
  },
            "/customers/{id}": {
              "get": {
                "description": "Details a Customer",
                "tags": [
                  "customer-service"
                ],
                "summary": "Details of Customer",
                "operationId": "getCustomer",
                "parameters": [
                  {
                    "type": "integer",
                    "description": "id of customer",
                    "name": "id",
                    "in": "path",
                    "required": true
                  }
                ],
                "responses": {
                  "200": {
                    "$ref": "#/responses/reposResp"
                  },
                  "400": {
                    "$ref": "#/responses/badReq"
                  }
                }
              },
              "put": {
                  "description": "Update Customer",
                  "tags": [
                    "customer-service"
                  ],
                  "summary": "Update Customer",
                  "operationId": "updateCustomer",
                  "parameters": [
                      {
                          "type": "integer",
                          "description": "id of customer",
                          "name": "id",
                          "in": "path",
                          "required": true
                        },
                      {
                          "name": "Body",
                          "in": "body",
                          "schema": {
                            "$ref": "#/definitions/CreateCustomer"
                          }
                        }
                  ],
                  "responses": {
                    "200": {
                      "$ref": "#/responses/reposResp"
                    },
                    "400": {
                      "$ref": "#/responses/badReq"
                    }
                  }
                },
                "delete": {
                  "description": "Delete Customer",
                  "tags": [
                    "customer-service"
                  ],
                  "summary": "Delete Customer",
                  "operationId": "deleteCustomer",
                  "parameters": [
                    {
                      "type": "integer",
                      "description": "id of customer",
                      "name": "id",
                      "in": "path",
                      "required": true
                    }
                  ],
                  "responses": {
                    "204": {
                      
                    },
                    "400": {
                      "$ref": "#/responses/badReq"
                    }
                  }
                }
          }
  },
  "definitions": {
    "CreateCustomer": {
      "description": "CreateCustomer contains customer id, customer name",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "string",
          "x-go-name": "trackingId"
        }
      }
    },
    "Customer": {
      "type": "object",
      "title": "Customer contains customer id, name",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "format": "string",
          "x-go-name": "TrackingId"
        }
      }
    }
    },
  "responses": {
      "badReq": {
        "description": "Error Bad Request",
        "schema": {
          "type": "object",
          "properties": {
            "code": {
              "description": "HTTP status code 400 - Status Bad Request",
              "type": "integer",
              "format": "int64",
              "x-go-name": "Code"
            },
            "message": {
              "description": "Detailed error message",
              "type": "string",
              "x-go-name": "Message"
            }
          }
        }
      },
      "forbidden": {
          "description": "Error Forbidden",
          "schema": {
            "type": "object",
            "properties": {
              "code": {
                "description": "HTTP status code 403 - Forbidden",
                "type": "integer",
                "format": "int64",
                "x-go-name": "Code"
              },
              "message": {
                "description": "Detailed error message",
                "type": "string",
                "x-go-name": "Message"
              }
            }
          }
        },
        "internal": {
          "description": "Error Interval Server",
          "schema": {
            "type": "object",
            "properties": {
              "code": {
                "description": "HTTP status code 500 - Internal server error",
                "type": "integer",
                "format": "int64",
                "x-go-name": "Code"
              },
              "message": {
                "description": "Detailed error message",
                "type": "string",
                "x-go-name": "Message"
              }
            }
          }
        },
        "notFound": {
          "description": "Error Not Found",
          "schema": {
            "type": "object",
            "properties": {
              "code": {
                "description": "HTTP status code 404 - Not Found",
                "type": "integer",
                "format": "int64",
                "x-go-name": "Code"
              },
              "message": {
                "description": "Detailed error message",
                "type": "string",
                "x-go-name": "Message"
              }
            }
          }
        },
        "ok": {
          "description": "Success response",
          "schema": {
            "type": "object",
            "properties": {
              "code": {
                "description": "HTTP Status Code 200",
                "type": "integer",
                "format": "int64",
                "x-go-name": "Code"
              }
            }
          }
        },
        "reposResp": {
          "description": "HTTP status code 200 and an array of customer models in data",
          "schema": {
            "type": "object",
            "properties": {
              "code": {
                "description": "HTTP status code 200 - Status OK",
                "type": "integer",
                "format": "int64",
                "x-go-name": "Code"
              },
              "data": {
                "description": "Array of Customer models",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Customer"
                },
                "x-go-name": "Data"
              }
            }
          }
        }
  }
}

`

type s struct{}

func (s *s) ReadDoc() string {
	return doc
}
func init() {
	swag.Register(swag.Name, &s{})
}
